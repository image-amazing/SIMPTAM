function varargout = proj(varargin)
% PROJ MATLAB code for proj.fig
%      PROJ, by itself, creates a new PROJ or raises the existing
%      singleton*.
%
%      H = PROJ returns the handle to a new PROJ or the handle to
%      the existing singleton*.
%
%      PROJ('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in PROJ.M with the given input arguments.
%
%      PROJ('Property','Value',...) creates a new PROJ or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before proj_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to proj_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help proj

% Last Modified by GUIDE v2.5 25-Mar-2013 15:22:01

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @proj_OpeningFcn, ...
                   'gui_OutputFcn',  @proj_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before proj is made visible.
function proj_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to proj (see VARARGIN)
clc;
World.points = generateworldpoints();
setappdata(handles.figure1,'world',World);

Camera.f = 0.5;
Camera.ay = 480*Camera.f;
Camera.ax = 640*Camera.f;
Camera.u0 = 640/2;
Camera.v0 = 480/2;
Camera.Int = [Camera.ax 0 Camera.u0; 0 Camera.ay Camera.v0; 0 0 1];

Camera.camt = [0 0 0]';
Camera.thetax = 0;
Camera.thetay = 0;    
Camera.thetaz = 0;
Camera.Ext = [];
setappdata(handles.figure1,'camera',Camera);

Display(handles);




% Choose default command line output for proj
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes proj wait for user response (see UIRESUME)
% uiwait(handles.figure1);



% --- Outputs from this function are returned to the command line.
function varargout = proj_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in pushbutton_w.
function pushbutton_w_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_w (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
Camera = getappdata(handles.figure1,'camera');
ct = [0 0 1 0]';
ct = Camera.Ext\ct;
Camera.camt = Camera.camt + ct(1:3);
setappdata(handles.figure1,'camera',Camera);
Display(handles);


% --- Executes on button press in pushbutton_d.
function pushbutton_d_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_d (see GCBOfh = figure('Position',[250 250 350 35)
% eventdata  reserved - to be defined i4n a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
Camera = getappdata(handles.figure1,'camera');
ct = [1 0 0 0]';
ct = Camera.Ext\ct;
Camera.camt = Camera.camt + ct(1:3);
setappdata(handles.figure1,'camera',Camera);
Display(handles);

% --- Executes on button press in pushbutton_s.
function pushbutton_s_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_s (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
Camera = getappdata(handles.figure1,'camera');
ct = [0 0 -1 0]';
ct = Camera.Ext\ct;
Camera.camt = Camera.camt + ct(1:3);
setappdata(handles.figure1,'camera',Camera);
Display(handles);

% --- Executes on button press in pushbutton_a.
function pushbutton_a_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_a (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
Camera = getappdata(handles.figure1,'camera');
ct = [-1 0 0 0]';
ct = Camera.Ext\ct;
Camera.camt = Camera.camt + ct(1:3);
setappdata(handles.figure1,'camera',Camera);
Display(handles);
    
% --- Executes on button press in pushbutton_right.
function pushbutton_right_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_right (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handes and user data (see GUIDATA)
Camera = getappdata(handles.figure1,'camera');
Camera.thetay = Camera.thetay + 0.1;
guidata(handles.figure1,handles);
setappdata(handles.figure1,'camera',Camera);
Display(handles);


% --- Executes on button press in pucamerashbutton_left.
function pushbutton_left_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_left (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles anmydata = guidata(hObject);d user data (see GUIDATA)
Camera = getappdata(handles.figure1,'camera');
Camera.thetay = Camera.thetay - 0.1;
setappdata(handles.figure1,'camera',Camera);
Display(handles);


function Display(handles)
Camera = getappdata(handles.figure1,'camera');


Rx = [1 0 0; 0 cos(Camera.thetax) sin(Camera.thetax); 0 -sin(Camera.thetax) cos(Camera.thetax)];
Ry = [cos(Camera.thetay) 0 -sin(Camera.thetay); 0 1 0; sin(Camera.thetay) 0 cos(Camera.thetay)];
Rz = [cos(Camera.thetaz) sin(Camera.thetaz) 0; -sin(Camera.thetaz) cos(Camera.thetaz) 0; 0 0 1];
R = Rx*Ry*Rz;
t = -R*Camera.camt;
Camera.Ext = [R t; 0 0 0 1]; 


CurrentKeyFrame.Ext = Camera.Ext;




Pvanilla = [1 0 0 0; 0 1 0 0; 0 0 1 0];
Camera.P = Camera.Int*Pvanilla*Camera.Ext;
setappdata(handles.figure1,'camera',Camera);


World = getappdata(handles.figure1,'world');


cla(handles.view3d);
axes(handles.view3d);
hold on;



for i = 1:length(World.points)
    ImagePoint = Project(Camera, World.points(i));
    if (~isempty(ImagePoint))
            plot(ImagePoint.location(1), ImagePoint.location(2),'w');
    end
end

%set(handles.view3d,'Color',[0 0 0]);


cla(handles.viewtopdown);
axes(handles.viewtopdown);


hold on;
plot(0, 0,'bx');
plot(0, 4,'wx');
plot(Camera.camt(1),Camera.camt(3),'gx');
Zaxis = (Camera.Ext)\[0 0 1 1]';
Xaxis = (Camera.Ext)\[1 0 0 1]';
plot(Zaxis(1),Zaxis(3),'bx');
plot(Xaxis(1),Xaxis(3),'rx');
    
    
    

hold off;

function [ImagePoint] = Project(Camera, WorldPoint)
ImagePoint = [];
X = WorldPoint.location;
nX = Camera.Ext*X;
nX = nX ./ nX(4);
if (nX(3) > Camera.f)
    x = Camera.P*X;
    x = x./x(3);
    if (x(1) > 1 && x(1) < 640 && x(2) > 1 && x(2) < 480)
        ImagePoint.id = WorldPoint.id;
        ImagePoint.location = [x(1) x(2) 1]';
    end
end    



